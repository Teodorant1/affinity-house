// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    // url      = env("DATABASE_URL")
    url       = env("NEXT_PRIVATE_DATABASE_URL")
    directUrl = env("NEXT_PRIVATE_DIRECT_DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User1   @relation(fields: [createdById], references: [id])
    createdById String
    booleanish     Boolean? 
    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User1    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User1     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User1 {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model BackgroundCheck {
  id                         String   @id @default(cuid())
  dateOfBirth                DateTime? @db.Timestamp(6)
  homeCountry                String?  @db.Text
  status                     String   @default("pending")
  createdAt                  DateTime @default(now()) @db.Timestamp(6)
  updatedAt                  DateTime @default(now()) @db.Timestamp(6)
  authenticateVerificationId String?  @db.Text

// Relations

//  @@unique([userId], name: "unique_user_background_check")

   User User @relation(fields: [Userid], references: [id])
   Userid String
}

model Payment {
  id             String   @id @default(cuid())
  userId         String
  stripePaymentId String? @db.Text
  amount         Int?     @db.Integer
  status         String?  @db.Text
  paymentMethod  String?  @db.Text
  createdAt      DateTime @default(dbgenerated("timezone('utc', now())")) @db.Timestamp(6)

// Relations
  user           User    @relation(fields: [userId], references: [id])
}

model Profile {
  id            String   @id 
  updatedAt     DateTime? @db.Timestamp(6)
  username      String?  @unique @db.Text
  fullName      String?  @db.Text
  avatarUrl     String?  @db.Text
  website       String?  @db.Text
  phoneNumber   String?  @db.Text
  location      String?  @db.Text
  gender        String?  @db.Text

  
 // Relations
  user          User     @relation(fields: [id], references: [id], onDelete: Cascade)
 
//  @@check([gender], 'gender_check', "gender IN ('male', 'female')")
//  @@check([location], 'location_check', "location IN ('2478 Penmar Avenue', '624 Hilgard Avenue')")
//  @@check([username], 'username_length', "char_length(username) >= 3")

  TourBooking TourBooking[]
}
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?


    UserStatus UserStatus[]

    Profile Profile[]

    Payment Payment[]

    BackgroundCheck BackgroundCheck[]
}


model TourBooking {
  id          String   @id @default(cuid())
  profileId   String   
  name        String?  @db.Text
  email       String?  @db.Text
  phone       String?  @db.Text
  uid         String?  @unique @db.Text
  bookingId   Int?     @db.Integer
  startTime   DateTime? @db.Timestamp(6)
  timeZone    String?  @db.Text
  location    String?  @db.Text
  eventTypeId Int?     @db.Integer
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @db.Timestamp(6)

//  Relations
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  @@index([email], name: "idx_tour_bookings_email")
  // @@check([location], 'tour_bookings_location_check', "location IN ('hilgard', 'penmar')")
}

model UserStatus {
  userId                 String   @id 
  backgroundCheckPaid     Boolean? @default(false)
  backgroundCheckPaidAt   DateTime? @db.Timestamp(6)

  // Relations
  user                   User     @relation(fields: [userId], references: [id])

  @@index([userId], name: "idx_user_status_user_id")
}